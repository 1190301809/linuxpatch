From b43f16a4dc2c6994c8152139d903011c9caac095 Mon Sep 17 00:00:00 2001
From: MercyHeart <2384268568@qq.com>
Date: Thu, 26 Sep 2024 23:25:09 +0200
Subject: [PATCH] arm64bcj kernel

---
 fs/erofs/Makefile   |   2 +-
 fs/erofs/bcj.c      | 255 ++++++++++++++++++++++++++++++++++++++++++++
 fs/erofs/bcj.h      |  25 +++++
 fs/erofs/erofs_fs.h |   3 +-
 fs/erofs/internal.h |   1 +
 fs/erofs/super.c    |   1 +
 fs/erofs/zdata.c    |  41 +++++++
 7 files changed, 326 insertions(+), 2 deletions(-)
 create mode 100644 fs/erofs/bcj.c
 create mode 100644 fs/erofs/bcj.h

diff --git a/fs/erofs/Makefile b/fs/erofs/Makefile
index 097d672e6..dad94238f 100644
--- a/fs/erofs/Makefile
+++ b/fs/erofs/Makefile
@@ -1,7 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0-only
 
 obj-$(CONFIG_EROFS_FS) += erofs.o
-erofs-objs := super.o inode.o data.o namei.o dir.o utils.o sysfs.o
+erofs-objs := super.o inode.o data.o namei.o dir.o utils.o sysfs.o bcj.o
 erofs-$(CONFIG_EROFS_FS_XATTR) += xattr.o
 erofs-$(CONFIG_EROFS_FS_ZIP) += decompressor.o zmap.o zdata.o pcpubuf.o
 erofs-$(CONFIG_EROFS_FS_ZIP_LZMA) += decompressor_lzma.o
diff --git a/fs/erofs/bcj.c b/fs/erofs/bcj.c
new file mode 100644
index 000000000..1d222466b
--- /dev/null
+++ b/fs/erofs/bcj.c
@@ -0,0 +1,255 @@
+// SPDX-License-Identifier: GPL-2.0+ OR Apache-2.0
+/*
+ * Copyright (C) 2024 HUAWEI, Inc.
+ *             http://www.huawei.com/
+ * Created by MercyHeart <2384268568@qq.com>
+ * Created by Feynman G <gxnorz@gmail.com>
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/psi.h>
+#include "bcj.h"
+#define Test86MSByte(b) ((b) == 0 || (b) == 0xFF)
+
+struct lzma_simple_x86 {
+	uint32_t prev_mask;
+	uint32_t prev_pos;
+};
+
+static size_t
+x86_code(void *simple_ptr, uint32_t now_pos, bool is_encoder,
+		uint8_t *buffer, size_t size)
+{
+	static const bool MASK_TO_ALLOWED_STATUS[8]
+		= { true, true, true, false, true, false, false, false };
+
+	static const uint32_t MASK_TO_BIT_NUMBER[8]
+			= { 0, 1, 2, 2, 3, 3, 3, 3 };
+
+	struct lzma_simple_x86 *simple = simple_ptr;
+	uint32_t prev_mask = simple->prev_mask;
+	uint32_t prev_pos = simple->prev_pos;
+
+	if (size < 5)
+		return 0;
+
+	if (now_pos - prev_pos > 5)
+		prev_pos = now_pos - 5;
+
+	const size_t limit = size - 5;
+	size_t buffer_pos = 0;
+
+	while (buffer_pos <= limit) {
+		uint8_t b = buffer[buffer_pos];
+
+		if (b != 0xE8 && b != 0xE9) {
+			++buffer_pos;
+			continue;
+		}
+
+		const uint32_t offset = now_pos + (uint32_t)(buffer_pos)
+				- prev_pos;
+		prev_pos = now_pos + (uint32_t)(buffer_pos);
+
+		if (offset > 5) {
+			prev_mask = 0;
+		} else {
+			for (uint32_t i = 0; i < offset; ++i) {
+				prev_mask &= 0x77;
+				prev_mask <<= 1;
+			}
+		}
+
+		b = buffer[buffer_pos + 4];
+
+		if (Test86MSByte(b)
+			&& MASK_TO_ALLOWED_STATUS[(prev_mask >> 1) & 0x7]
+				&& (prev_mask >> 1) < 0x10) {
+
+			uint32_t src = ((uint32_t)(b) << 24)
+				| ((uint32_t)(buffer[buffer_pos + 3]) << 16)
+				| ((uint32_t)(buffer[buffer_pos + 2]) << 8)
+				| (buffer[buffer_pos + 1]);
+
+			uint32_t dest;
+
+			while (true) {
+				if (is_encoder)
+					dest = src + (now_pos + (uint32_t)(
+							buffer_pos) + 5);
+				else
+					dest = src - (now_pos + (uint32_t)(
+							buffer_pos) + 5);
+
+				if (prev_mask == 0)
+					break;
+
+				const uint32_t i = MASK_TO_BIT_NUMBER[
+						prev_mask >> 1];
+
+				b = (uint8_t)(dest >> (24 - i * 8));
+
+				if (!Test86MSByte(b))
+					break;
+
+				src = dest ^ ((1U << (32 - i * 8)) - 1);
+			}
+
+			buffer[buffer_pos + 4]
+					= (uint8_t)(~(((dest >> 24) & 1) - 1));
+			buffer[buffer_pos + 3] = (uint8_t)(dest >> 16);
+			buffer[buffer_pos + 2] = (uint8_t)(dest >> 8);
+			buffer[buffer_pos + 1] = (uint8_t)(dest);
+			buffer_pos += 5;
+			prev_mask = 0;
+
+		} else {
+			++buffer_pos;
+			prev_mask |= 1;
+			if (Test86MSByte(b))
+				prev_mask |= 0x10;
+		}
+	}
+
+	simple->prev_mask = prev_mask;
+	simple->prev_pos = prev_pos;
+
+	return buffer_pos;
+}
+
+static size_t arm_code(uint32_t now_pos, bool is_encoder,
+		uint8_t *buffer, size_t size)
+{
+	size_t i;
+
+	for (i = 0; i + 4 <= size; i += 4) {
+		if (buffer[i + 3] == 0xEB) {
+			uint32_t src = ((uint32_t)(buffer[i + 2]) << 16)
+					| ((uint32_t)(buffer[i + 1]) << 8)
+					| (uint32_t)(buffer[i + 0]);
+			src <<= 2;
+
+			uint32_t dest;
+
+			if (is_encoder)
+				dest = now_pos + (uint32_t)(i) + 8 + src;
+			else
+				dest = src - (now_pos + (uint32_t)(i) + 8);
+
+			dest >>= 2;
+			buffer[i + 2] = (dest >> 16);
+			buffer[i + 1] = (dest >> 8);
+			buffer[i + 0] = dest;
+		}
+	}
+
+	return i;
+}
+
+// 检查系统的字节序，判断是小端还是大端
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+#define IS_LITTLE_ENDIAN 1
+#else
+#define IS_LITTLE_ENDIAN 0
+#endif
+
+// 如果是大端系统，定义字节交换宏
+#define UINT32_C(c) c##U
+#ifndef bswap32
+#define bswap32(n) ((uint32_t)( \
+(((n) & UINT32_C(0x000000FF)) << 24) | \
+(((n) & UINT32_C(0x0000FF00)) << 8)  | \
+(((n) & UINT32_C(0x00FF0000)) >> 8)  | \
+(((n) & UINT32_C(0xFF000000)) >> 24)))
+#endif
+
+// 读取32位小端整数
+static inline uint32_t read32le(const uint8_t *buf)
+{
+	uint32_t num;
+
+	memcpy(&num, buf, sizeof(num));
+    // 如果系统是大端序，则进行字节交换
+	if (!IS_LITTLE_ENDIAN)
+		num = bswap32(num);
+	return num;
+}
+
+// 写入32位小端整数
+static inline void write32le(uint8_t *buf, uint32_t num)
+{
+	if (!IS_LITTLE_ENDIAN)
+		num = bswap32(num);
+	memcpy(buf, &num, sizeof(num));
+}
+
+static size_t arm64_code(uint32_t now_pos, bool is_encoder,
+		uint8_t *buffer, size_t size)
+{
+	size_t i;
+
+#ifdef __clang__
+#	pragma clang loop vectorize(disable)
+#endif
+	for (i = 0; i + 4 <= size; i += 4) {
+		uint32_t pc = (uint32_t)(now_pos + i);
+		uint32_t instr = read32le(buffer + i);
+
+		if ((instr >> 26) == 0x25) {
+			const uint32_t src = instr;
+
+			instr = 0x94000000;
+
+			pc >>= 2;
+			if (!is_encoder)
+				pc = 0U - pc;
+
+			instr |= (src + pc) & 0x03FFFFFF;
+			write32le(buffer + i, instr);
+
+		} else if ((instr & 0x9F000000) == 0x90000000) {
+			const uint32_t src = ((instr >> 29) & 3)
+					| ((instr >> 3) & 0x001FFFFC);
+			if ((src + 0x00020000) & 0x001C0000)
+				continue;
+
+			instr &= 0x9000001F;
+
+			pc >>= 12;
+			if (!is_encoder)
+				pc = 0U - pc;
+
+			const uint32_t dest = src + pc;
+
+			instr |= (dest & 3) << 29;
+			instr |= (dest & 0x0003FFFC) << 3;
+			instr |= (0U - (dest & 0x00020000)) & 0x00E00000;
+			write32le(buffer + i, instr);
+		}
+	}
+
+	return i;
+}
+
+int bcj_code(uint8_t *buf, uint32_t startpos, size_t size, int bcj_type, bool is_encode)
+{
+	size_t processed_size = 0;
+	struct lzma_simple_x86 simple;
+
+	switch (bcj_type) {
+	case 1:
+		simple.prev_mask = 0;
+		simple.prev_pos = (uint32_t)(-5);
+		processed_size = x86_code(&simple, startpos, is_encode, buf, size);
+		break;
+	case 2:
+		processed_size = arm_code(startpos, is_encode, buf, size);
+		break;
+	case 3:
+		processed_size = arm64_code(startpos, is_encode, buf, size);
+		break;
+	default:
+		break;
+	}
+	return processed_size;
+}
diff --git a/fs/erofs/bcj.h b/fs/erofs/bcj.h
new file mode 100644
index 000000000..8056b3d7e
--- /dev/null
+++ b/fs/erofs/bcj.h
@@ -0,0 +1,25 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR Apache-2.0 */
+/*
+ * Copyright (C) 2024 HUAWEI, Inc.
+ *             http://www.huawei.com/
+ * Created by MercyHeart <2384268568@qq.com>
+ * Created by Feynman G <gxnorz@gmail.com>
+ */
+#ifndef __EROFS_BCJ_H
+#define __EROFS_BCJ_H
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+int erofs_bcj_filedecode(char *filepath, int bcj_type);
+int erofs_bcj_fileread(int fd, void *buf, size_t nbytes, off_t offset);
+int bcj_code(uint8_t *buf, uint32_t startpos, size_t size, int bcj_type, bool is_encode);
+int page_bcj_decode(struct page *page, size_t startpos);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/fs/erofs/erofs_fs.h b/fs/erofs/erofs_fs.h
index 6c0c270c4..31c1289d1 100644
--- a/fs/erofs/erofs_fs.h
+++ b/fs/erofs/erofs_fs.h
@@ -83,7 +83,8 @@ struct erofs_super_block {
 	__le32 xattr_prefix_start;	/* start of long xattr prefixes */
 	__le64 packed_nid;	/* nid of the special packed inode */
 	__u8 xattr_filter_reserved; /* reserved for xattr name filter */
-	__u8 reserved2[23];
+	__u8 bcj_flag;
+	__u8 reserved2[22];
 };
 
 /*
diff --git a/fs/erofs/internal.h b/fs/erofs/internal.h
index 45dc15ebd..7988cf347 100644
--- a/fs/erofs/internal.h
+++ b/fs/erofs/internal.h
@@ -164,6 +164,7 @@ struct erofs_sb_info {
 	u8 volume_name[16];             /* volume name */
 	u32 feature_compat;
 	u32 feature_incompat;
+	u8 bcj_flag;
 
 	/* sysfs support */
 	struct kobject s_kobj;		/* /sys/fs/erofs/<devname> */
diff --git a/fs/erofs/super.c b/fs/erofs/super.c
index 6cb5c8916..d0990e294 100644
--- a/fs/erofs/super.c
+++ b/fs/erofs/super.c
@@ -341,6 +341,7 @@ static int erofs_read_superblock(struct super_block *sb)
 
 	sbi->build_time = le64_to_cpu(dsb->build_time);
 	sbi->build_time_nsec = le32_to_cpu(dsb->build_time_nsec);
+	sbi->bcj_flag = dsb->bcj_flag;
 
 	memcpy(&sb->s_uuid, dsb->uuid, sizeof(dsb->uuid));
 
diff --git a/fs/erofs/zdata.c b/fs/erofs/zdata.c
index 424f656cd..df353a5e3 100644
--- a/fs/erofs/zdata.c
+++ b/fs/erofs/zdata.c
@@ -9,6 +9,8 @@
 #include <linux/cpuhotplug.h>
 #include <trace/events/erofs.h>
 
+#include "bcj.h"
+
 #define Z_EROFS_PCLUSTER_MAX_PAGES	(Z_EROFS_PCLUSTER_MAX_SIZE / PAGE_SIZE)
 #define Z_EROFS_INLINE_BVECS		2
 
@@ -87,6 +89,9 @@ struct z_erofs_pcluster {
 	/* L: indicate several pageofs_outs or not */
 	bool multibases;
 
+	/* L: bcj test data*/
+	uint32_t  filepos;
+
 	/* A: compressed bvecs (can be cached or inplaced pages) */
 	struct z_erofs_bvec compressed_bvecs[];
 };
@@ -792,6 +797,7 @@ static int z_erofs_register_pcluster(struct z_erofs_decompress_frontend *fe)
 	/* new pclusters should be claimed as type 1, primary and followed */
 	pcl->next = fe->owned_head;
 	pcl->pageofs_out = map->m_la & ~PAGE_MASK;
+	pcl->filepos = map->m_la;
 	fe->mode = Z_EROFS_PCLUSTER_FOLLOWED;
 
 	/*
@@ -1236,6 +1242,37 @@ static int z_erofs_parse_in_bvecs(struct z_erofs_decompress_backend *be,
 	return 0;
 }
 
+static int z_erofs_bcj_decode_page(struct page *page, struct z_erofs_pcluster *pcl,
+				u8 bcj_flag, int nowpage, int totalpage)
+{
+	if (pcl->pclustersize != pcl->length) {
+		uint8_t *buf = (uint8_t *)kmap_local_page(page);
+
+		if (!buf)
+			return -1;
+		uint32_t startpos;
+
+		if (nowpage == 0) {
+			startpos = pcl->filepos;
+			bcj_code(buf + pcl->pageofs_out, startpos,
+					PAGE_SIZE - pcl->pageofs_out, bcj_flag, false);
+		} else if (nowpage == totalpage - 1) {
+			startpos = pcl->filepos + nowpage*PAGE_SIZE - pcl->pageofs_out;
+			if ((pcl->pageofs_out + pcl->length)%PAGE_SIZE == 0)
+				bcj_code(buf, startpos, PAGE_SIZE, bcj_flag, false);
+			else
+				bcj_code(buf, startpos,
+					(pcl->pageofs_out + pcl->length)%PAGE_SIZE,
+					bcj_flag, false);
+		} else {
+			startpos = pcl->filepos + nowpage*PAGE_SIZE - pcl->pageofs_out;
+			bcj_code(buf, startpos, PAGE_SIZE, bcj_flag, false);
+		}
+		kunmap_local(buf);
+	}
+	return 0;
+}
+
 static int z_erofs_decompress_pcluster(struct z_erofs_decompress_backend *be,
 				       int err)
 {
@@ -1301,6 +1338,10 @@ static int z_erofs_decompress_pcluster(struct z_erofs_decompress_backend *be,
 			continue;
 
 		DBG_BUGON(z_erofs_page_is_invalidated(page));
+
+		if (sbi->bcj_flag)
+			z_erofs_bcj_decode_page(page, pcl, sbi->bcj_flag, i, be->nr_pages);
+
 		if (!z_erofs_is_shortlived_page(page)) {
 			z_erofs_onlinefolio_end(page_folio(page), err);
 			continue;
-- 
2.45.2.windows.1

